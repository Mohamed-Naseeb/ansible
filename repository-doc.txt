 commands
------------------------
conf files
==========
 /etc/ansible/anisble.cfg
 ~/.ansible.cfg
 ./ansible.cfg

ad-hoc
#ansible all -i inventory -m ping
#ansible all -m ping
#ansible all --list-hosts
#ansible all -m gater_facts --limit <IP/hostname>
#ansible servera.lab.example.com -m command -a 'systemctl status httpd'

palybook
#ansible-playbook --syntax-check script.yml
#ansible-playbook -C script.yml  (dry run)
#ansible-playbook script.yml     

How to work with different distros of linux
#use when statement to identify hosts according to conditions that can be matched against variables of gathered facts.
  when: ansible_distribution == "CentOS"
  when: ansible_distribution in ["RHEL","CentOS"]
  when: ansible_distribution == "CentOS" and ansible_distribution_version == "8.2"

forks and serial
*Ansible uses batches for task execution, which are controlled by a parameter called forks . The default value for forks is 5, which means Ansible executes a task on the first five hosts, waits for the task to complete, and then takes the next batch of five hosts, and so on.
  eg: we can change this according the requirement , forks: 2
*serial is a tricky to understand. assume the situation where we have 4 nodes, forks: 5 and serial: 2.
 First task process on 2 nodes (nodeA, nodeB) simultaneously (should process on 4 nodes, but due to serial configuration it process on 2 nodes only) and then jump into Second task. Second task process on 2 nodes (nodeA, nodeB) simultaneously. Once both tasks completed, it again run playbook for rest of 2 nodes.
source--https://medium.com/devops-srilanka/difference-between-forks-and-serial-in-ansible-48677ebe3f36

Include and import
====================
we can specify tasks in other files and then include or import these tasks to the playbook
      tasks:
      - import_tasks: /home/username/tasks_file_path
      
      tasks:
      - name: Include task list in play
        include_tasks: stuff.yaml
NOTE: All import* statements are pre-processed at the time playbooks are parsed. All include* statements are processed as they encountered during the execution of the playbook.

It is also possible to import playbooks inside a playbook 

- import_playbook: common_roles.yml

- import_playbook: staging_roles.yml
  when: env == 'staging'

- name: configure web servers
  hosts: "{{ env }}_web"
  roles:
    - nginx
    - my_site

source--https://www.toptechskills.com/ansible-tutorials-courses/ansible-include-import-playbooks-tutorial-examples/

Targeting specific nodes
=========================
we use inventory to do this.
[argentian-mailserver]
192.168.10.2     user= mail_admin useremail= mail_admin_email  (#these are variables which we can use in playbook when using this hosts/node)

[miami-webserver]
192.168.11.33
192.168.[4:5].[1.254]

[newyork-database]
server[a:z].example.com
server[01:20].example.com

[north-america:children]
newyork-database
miami-webserver

Variables
=========
https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html
#declaring
vars:
  user_tvm: james
  user_shell: /sbin/nologin

#calling
 tasks:
 - name: adding user {{user_tvm}} 
   user:
     name: "{{user_tvm}}"
     shell: "{{user_shell}}"

variables importing from files
#playlevel
vars_files:
  - /home/project2/var/uservars.yml

  we can call variables from this file like above calling.eg: name: "{{user_tvm}}"  

#vim uservars.yml 
user_tvm: james
user_shell: /sbin/nologin

Managin secrets
================
#man ansible-vault

#ansible-vault create password.yml          creating vault file
you have to give a password after this.

#ansible-vault view password.yml            viewing vault file
#ansible-vault edit password.yml            for editting
#ansible-vault encrypt pass_key.yml          change a normal file to vault file

#ansible-vault decrypt pass_key.yml          reverting vault file to a normal file
#ansible-vault decrypt pass_key.yml --output=passkey.yml 

#ansible-vault rekey user-detail.yml         change password of vault file

how to use vault file in a playbook
examples are on RHCE text book. please check it.

Managing facts(more info check text book)
==============
custome facts are created in ansible control node and copied to required managed hosts using play book.
example is on Text. Check the Lab section

checkout regester, debug and fail module
---
- name: Ansible debug module in action
  hosts: all
  tasks:
          - name: Print system uptime
            shell: uptime -p
            register: system_uptime    # The register keyword can be used to capture the output of a command in a variable.
          - name: Print uptime of managed node
            debug:
              msg: "{{ system_uptime }}" # what ever given in msg argument is printed while running playbook
             
             or
          - name: print using var
            debug:
              var: system_uptime
note: 
msg: – This parameter accepts strings as inputs. This is used to print a customized message. If no message is given, then a generic message like “Hello World!” is
var: – This accepts strings as input and this is the variable that has been set either by Ansible facts or by the playbook.

Conditional tasks and loop
==========================
check text book
register, in detailed view is in this section

Handlers & Handling task failure
========
check text book
NOTE:
*Remember that handlers are notified when a task reports a changed result but are not notified when it reports an ok or failed result.
*When a task makes a change to a managed host, it reports the changed state and notifies
handlers. When a task does not need to make a change, it reports ok and does not notify handlers.

  ignore_errors: yes 
#ignore_errors in a task to continue playbook execution on the host even if the task fails.
  force-handlers: yes 
#force_handlers keyword in a play to force execution of the handler even if a task fails:

#changed_when
tasks:
- name: Check local time
  command: date
  register: command_result
  changed_when: false
- name: Print local time
  debug:
    var: command_result.stdout

# block: Defines the main tasks to run.
# rescue: Defines the tasks to run if the tasks defined in the block clause fail.
# always: Defines the tasks that will always run independently of the success or failure of tasks
  defined in the block and rescue clauses.
examples are on text book

Roles
======
 In Ansible, the role is the primary mechanism for breaking a playbook into multiple files. This simplifies writing complex playbooks, and it makes them easier to reuse.

creating a Role
---------------
Creating roles in Ansible requires no special development tools. Creating and using a role is a three
step process:
1.Create the role directory structure.
2.Define the role content.
3.Use the role in a playbook.

By default, Ansible looks for roles in a subdirectory called roles in the directory containing your Ansible Playbook. This allows you to store roles with the playbook and other supporting files. 

1:Create The Role Directory Structure.

1. we can create the directory structure by ourselves which in (inside roles > role_name > defaults,files,handles,meta,README.md,tasks,vars  - you can check text book to know more about these files) 

2.or we can creating a Role Skeleton using ansible-galaxy command
eg:
[user@host playbook-project]$ cd roles
[user@host roles]$ ansible-galaxy init my_new_role
[user@host roles]$ ls my_new_role/

2:Define the Role Content

Once you have created the directory structure, you must write the content of the role. A good place to start is the ROLENAME/tasks/main.yml task file, the main list of tasks run by the role.
Check the text book for more details

3: Using The Role In A Playbook
[user@host ~]$ cat use-motd-role.yml
---
- name: use motd role playbook
  hosts: remote.example.com
  remote_user: devops
  become: true
  roles:
    - motd

Changing a Role's Behavior with Variables
------------------------------------------
check text book -- it discuss about how different types of variable format can be used to alter roles behavior

check the guided exercise of page 319 on text book

Deploying Roles With Ansible Galaxy
====================================

Deploying files to managed hosts
=================================
check managing_files.yaml